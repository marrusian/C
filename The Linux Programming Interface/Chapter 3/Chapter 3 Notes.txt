- A SYSTEM CALL is a CONTROLLED ENTRY POINT into the KERNEL, allowing a process to REQUEST that the kernel
perform some action on the process's behalf. The kernel makes a RANGE OF SERVICES accessible to programs via
the SYSTEM CALL API. These services include, for example, creating a new process, performing I/O, and creating
a pipe for IPC (The syscalls(2) man page lists the Linux system calls).

- Before going into the DETAILS of how a system call works, we NOTE some GENERAL POINTS:
   a) A system call changes the PROCESSOR STATE from USER MODE to KERNEL MODE, so that the CPU can ACCESS
     protected kernel memory.
   b) The SET of system calls is FIXED. Each system call is IDENTIFIED by a UNIQUE NUMBER (This numbering
     scheme is NOT NORMALLY VISIBLE to programs, which IDENTIFY system calls by NAME).
   c) Each system call may have a SET OF ARGUMENTS that specify INFORMATION to be TRANSFERRED from USER SPACE
     (i.e., the process's virtual address space) to KERNEL SPACE and vice versa.

- From a programming POV, invoking a system call looks MUCH LIKE calling a C function. However, BEHIND THE
SCENES, many steps occur during the execution of a system call. To illustrate this, we consider the steps in
the ORDER that they occur on a specific hardware implementation, the x86-32. The steps are as follows:
   1) The application program MAKES a SYSTEM CALL by INVOKING a WRAPPER FUNCTION in the C library.
   2) The WRAPPER FUNCTION must make ALL of the system call ARGUMENTS AVAILABLE to the system call
     TRAP-HANDLING ROUTINE. These arguments are PASSED to the WRAPPER via the STACK, but the KERNEL EXPECTS
     them in SPECIFIC REGISTERS. The WRAPPER function COPIES the ARGUMENTS to these REGISTERS.
   3) Since ALL system calls ENTER the kernel the SAME WAY, the kernel NEEDS some METHOD OF IDENTIFYING the
     system call. To PERMIT this, the WRAPPER function COPIES the SYSTEM CALL NUMBER into a specific CPU
     REGISTER (%eax).
   4) The WRAPPER function EXECUTES a TRAP machine instruction (int 0x80), which CAUSES the PROCESSOR to
     SWITCH from USER MODE to KERNEL MODE and EXECUTE CODE pointed to by location 0x80 of the system's TRAP
     VECTOR. 
        Note: More recent x86-32 architures implement the "SYSENTER" instruction, which provides a FASTER
              METHOD of ENTERING KERNEL MODE than the conventional int 0x80 trap instruction. The use of
              SYSENTER is supported in the 2.6 kernel and from glibc 2.3.2 onward.
   5) In RESPONSE to the TRAP to LOCATION 0x80, the kernel INVOKES its "system_call()" routine (located in the
     assembler file arch/x86/kernel/entry.S) to HANDLE the TRAP. This handler:
        a) Saves register values onto the KERNEL STACK.
        b) Checks the VALIDITY of the SYSTEM CALL NUMBER.
        c) Invokes the APPROPRIATE system call service routine, which is FOUND by USING the SYSTEM CALL
          NUMBER to INDEX a TABLE of ALL system call service routines (the KERNEL VARIABLE "sys_call_table").
          If the system call service routine has ANY ARGUMENTS, it FIRST CHECKS their VALIDITY; for example,
          it checks that the addresses point to VALID LOCATIONS in USER MEMORY. Then the service routine
          PERFORMS the REQUIRED TASK, which may involve modifying values at addresses specified in the given
          arguments and transferring data between user memory and kernel memory (e.g., in I/O operations).
          Finally, the service routine RETURNS a RESULT STATUS to the "system_call()" routine.
        d) Restores register values from the KERNEL STACK and PLACES the SYSTEM CALL RETURN VALUE on the
          STACK.
        e) Returns to the WRAPPER function, SIMULTANEOUSLY returning the PROCESSOR to USER MODE.
   6) If the RETURN VALUE of the system call service routine INDICATED an ERROR, the WRAPPER function SETS
     the GLOBAL VARIABLE "errno" using this value. The wrapper function then RETURNS to the CALLER, providing
     an INTEGER return value INDICATING the SUCCESS or FAILURE of the system call.
        Note:  On LINUX, system call service routines FOLLOW a CONVENTION of RETURNING a NONNEGATIVE value to
             INDICATE SUCCESS. In case of an ERROR, the routine RETURNS a NEGATIVE NUMBER, which is the
             NEGATED VALUE of one of the "errno" constants. When a NEGATIVE VALUE is RETURNED, the C library
             WRAPPER function NEGATES it (to make it positive), COPIES the result into "errno", and RETURNS
             -1 as the FUNCTION RESULT of the wrapper to INDICATE an ERROR to the CALLING PROGRAM.
               This convention RELIES on the ASSUMPTION that system call service routines DON'T return
              NEGATIVE values on SUCCESS. However, for a FEW of these routines, this assumption DOESN'T HOLD.
              Normally, this ISN'T a problem, since the range of negated "errno" values DOESN'T OVERLAP with
              valid return values. However, this convention DOES CAUSE a PROBLEM in ONE CASE: the F_GETOWN
              operation of the "fcntl()" system call.

- To illustrate, on Linux/x86-32, "execve()" is system call number 11 (__NR_execve). Thus, in the
"sys_call_table" vector, entry 11 CONTAINS the ADDRESS of "sys_execve()", the SERVICE ROUTINE for this system
call (On Linux, system call service routines typically have names of the form "sys_xyz()", where "xyz()" is
the system call in question).

- The information given above is MORE than we'll USUALLY need to know. However, it illustrates the IMPORTANT
POINT that, even for a SIMPLE SYSTEM CALL, quite a bit of work must be done, and thus system calls have a
SMALL but appreciable OVERHEAD.

##########################################################################################################
- A LIBRARY FUNCTION is simply one of the multitude of functions that constitutes the standard C library
(for brevity, we'll often just write "function" rather than "library function"). The purposes of these
functions are VERY DIVERSE, including such tasks as opening a file, converting time to a human-readable
format, and comparing two character strings.

- Many library functions DON'T MAKE ANY USE of system call (e.g., the string-manipulation functions). On the
other hand, SOME library functions are LAYERED on TOP of SYSTEM CALLS. For example, the "fopen()" library
function uses the "open()" system call to ACTUALLY OPEN a FILE. Often, library functions are DESIGNED to
PROVIDE a more CALLER-FRIENDLY INTERFACE than the underlying system call. For example, the "printf()" function
provides OUTPUT FORMATTING and DATA BUFFERING, whereas the "write()" system call JUST OUTPUTS a BLOCK OF
BYTES. Similarly, the "malloc()" and "free()" functions perform VARIOUS BOOKKEEPING TASKS that make them a
MUCH EASIER WAY to ALLOCATE and FREE MEMORY than the underlying "brk()" system call.

##########################################################################################################
- There are DIFFERENT IMPLEMENTATIONS of the standard C library on the various UNIX implementations. The
MOST COMMONLY USED implementation on Linux is the GNU C Library (abbreviated "glibc").

- Sometimes, we NEED to DETERMINE the VERSION of "glibc" on a system. From the SHELL, we can do this by
RUNNING the "glibc" shared library file AS THOUGH it were an EXECUTABLE PROGRAM. When we RUN the LIBRARY as
an EXECUTABLE, it DISPLAYS various TEXT, including its VERSION NUMBER.
- In some Linux distributions, the GNU C library resides at a different pathname. One way of DETERMINING the
LOCATION of the LIBRARY is to run the "ldd" (list dynamic dependencies) program against an executable LINKED
DINAMICALLY against "glibc" (most executables are linked in this manner). We can then INSPECT the RESULTING
LIBRARY DEPENDENCY LIST to find the location of the "glibc" shared library:
      $ ldd myprog

- There are TWO MEANS by which an application program can DETERMINE the VERSION of the GNU C Library present
on the system:
   a) By TESTING CONSTANTS.
   b) By CALLING a LIBRARY FUNCTION.

- From version 2.0 onward, "glibc" defines TWO CONSTANTS ("__GLIBC__" and "__GLIBC_MINOR__"), that can be
TESTED at COMPILE TIME (in #ifdef statements). On a system with "glibc 2.12" installed, these constants would
have the values 2 and 12. However, these constants are of LIMITED USE in a program that is COMPILED on ONE
SYSTEM, but RUN on ANOTHER SYSTEM with a DIFFERENT "glibc".
- To HANDLE this POSSIBILITY, a program can CALL the "gnu_get_libc_version()" function to DETERMINE the
VERSION of "glibc" available at RUN TIME. The "gnu_get_libc_version()" function RETURNS a POINTER to a STRING,
such as "2.12".

   Note: We can ALSO obtain VERSION INFORMATION by USING the "confstr()" function to RETRIEVE the VALUE of
         the (glibc-specific) "_CS_GNU_LIBC_VERSION" configuration variable. This call RETURNS a STRING such
         as "glibc 2.12"

##########################################################################################################
- Almost EVERY system call AND library function RETURNS some type of STATUS VALUE indicating whether the call
SUCCEEDED or FAILED. This status value should ALWAYS be CHECKED to see whether the call SUCCEEDED. If it
DID NOT, then APPROPRIATE ACTION should be taken - at the VERY LEAST, the program should DISPLAY an ERROR
MESSAGE warning that something UNEXPECTED occured.
- Although it is TEMPTING to save typing time by EXCLUDING these CHECKS, it is FALSE ECONOMY. Many hours of
debugging time can be WASTED because a CHECK was NOT MADE on the STATUS RETURN of a system call or library
function that "couldn't possibly fail".
    Note: A few system calls NEVER FAIL. For example, "getpid()" ALWAYS successfully returns the ID of a
         process, and "_exit()" ALWAYS terminates a process. It is NOT NECESSARY to CHECK the RETURN VALUES
         from SUCH system calls.

- The manual page for EACH system call DOCUMENTS the POSSIBLE RETURN VALUES of the call, showing WHICH
value(s) INDICATE an ERROR. Usually, an ERROR is INDICATED by a RETURN of -1. Thus, a SYSTEM CALL can be
CHECKED with code such as the following:

     fd = open(pathname, flags, mode);     /* syscall to open a file */
     if(fd == -1){
        /* Code to handle the error */
     }
     ...
     if(close(fd) == -1){
        /* Code to handle the error */
      }

- When a system call FAILS, it SETS the GLOBAL INTEGER VARIABLE "errno" to a POSITIVE value that IDENTIFIES
the SPECIFIC ERROR. Including the "<errno.h>" header file PROVIDES a DECLARATION of "errno", as well as a 
SET OF CONSTANTS for the VARIOUS ERROR NUMBERS. All of these symbolic names commence with 'E'. The section
headed "ERRORS" in each manual page PROVIDES a LIST of POSSIBLE "errno" VALUES that can be RETURNED by each
system call. Here is a simple example of the use of "errno" to DIAGNOSE a system call error:
     
     cnt = read(fd, buf, numbytes);
     if(cnt == -1){
        if(errno == EINTR)
           fprintf(stderr, "Read was interrupted by a signal\n");
        else{
           /* Some other error occurred */
        }
     }
     
- Successful system calls and library functions NEVER RESET "errno" to 0, so this variable may have a NONZERO
VALUE as a CONSEQUENCE of an ERROR from a PREVIOUS CALL. Furthermore, SUSv3 PERMITS a SUCCESSFUL function call
to SET "errno" to a NONZERO VALUE (although FEW functions do this). Therefore, when CHECKING for an ERROR,
we should ALWAYS FIRST CHECK if the function RETURN value INDICATES an ERROR, and ONLY THEN examine "errno"
to DETERMINE the CAUSE of the ERROR.
- A few system calls (e.g., "getpriority()") can LEGITIMATELY return -1 on SUCCESS. To DETERMINE whether an
ERROR OCCURS on such calls, we SET "errno" to 0 BEFORE the call, and THEN CHECK it AFTERWARD. If the call
RETURNS -1 and "errno" is NONZERO, an ERROR OCCURRED (A similar statement also applies to a few library
functions).
- A COMMON course of action after a FAILED system call is to PRINT an ERROR MESSAGE based on the "errno"
value. The "perror()" and "strerror()" library functions are provided for this purpose.
- The "perror()" function PRINTS the STRING pointed to by its "msg" argument, FOLLOWED by a message
CORRESPONDING to the CURRENT VALUE of "errno". A SIMPLE WAY of HANDLING ERRORS from system calls would be as
follows:

     fd = open(pathname, flags, mode);
     if(fd == -1){
        perror("open");
        exit(EXIT_FAILURE);
     }

- The "strerror()" function returns the ERROR STRING corresponding to the ERROR NUMBER given in its "errnum"
argument. The string returned by "strerror()" may be STATICALLY ALLOCATED, which means that it could be
OVERWRITTEN by SUBSEQUENT CALLS to "strerror()".
- If "errnum" specifies an UNRECOGNIZED ERROR NUMBER, "strerror()" returns a string of the form "Unknown error
nnn". On some other implementations, "strerror()" instead returns NULL in this case.
- Because "perror()" and "strerror()" functions are LOCALE-SENSITIVE, error descriptions are DISPLAYED in the
LOCAL LANGUAGE.

- The various library functions return DIFFERENT data types and DIFFERENT values to indicate failure (check
the man page for each function). For our purposes, library functions can be DIVIDED into the FOLLOWING
CATEGORIES:
   a) Some library functions return ERROR INFORMATION in EXACTLY the SAME WAY as SYSTEM CALLS: a -1 return
      value, with "errno" INDICATING the SPECIFIC ERROR. An EXAMPLE of such a function is "remove()", which
      REMOVES a FILE (using the "unlink()" system call) or a DIRECTORY (using the "rmdir()" system call).
      Errors from these functions can be DIAGNOSED in the SAME WAY as ERRORS from SYSTEM CALLS.
   b) Some library functions return a value OTHER THAN -1 on error, but nevertheless SET "errno" to INDICATE
      the SPECIFIC ERROR CONDITION. For example, "fopen()" returns a NULL pointer on error, and the SETTING
      of "errno" DEPENDS on WHICH underlying system call failed. The "perror()" and "strerror()" functions
      can be used to DIAGNOSE these errors.
   c) Other library functions DON'T USE "errno" AT ALL. The METHOD for DETERMINING the EXISTENCE and CAUSE of 
      errors DEPENDS on the PARTICULAR FUNCTION and is DOCUMENTED in the function's manual page. For these
      functions, it is a MISTAKE to use "errno", "perror()", or "strerror()" to diagnose errors.

##########################################################################################################
- We consider the topic of writing PORTABLE SYSTEM PROGRAMS. We introduce FEATURE TEST MACROS and the STANDARD
SYSTEM DATA TYPES defined by SUSv3 (Single UNIX Specification Version 3), and then look at some OTHER
portability issues.

- Various standards govern the behaviour of the system call and library function APIs. Some of these standards
are DEFINED by STANDARD BODIES such as "The Open Group (SUS)", while OTHERS are DEFINED by the TWO
HISTORICALLY IMPORTANT UNIX implementations: BSD and System V Release 4 (and the associated System V Interface
Definition).
- Sometimes, when writing PORTABLE applications, we may want the various header files to ONLY EXPOSE the
definitions (constants, function prototypes, etc) that follow a PARTICULAR STANDARD. To do this, we define ONE
or MORE of the FEATURE TEST MACROS listed below when COMPILING a program. One way that we can do this is by
DEFINING the MACRO in the program SOURCE CODE BEFORE including any header files: 
    #define _BSD_SOURCE 1

- Alternatively, we can use the "-D" option to the C compiler:
    $ cc -D_BSD_SOURCE prog.c

  Note: The term FEATURE TEST MACRO may seem confusing, but it MAKES SENSE if we LOOK at things from the
       PERSPECTIVE of the IMPLEMENTATION. The implementation decides WHICH of the FEATURES available in each
       header it SHOULD make VISIBLE, by TESTING (with #if) WHICH VALUES the application has defined for these
       MACROS.

- The following feature test macros are SPECIFIED by the RELEVANT STANDARDS, and CONSEQUENTLY their USAGE is
PORTABLE to ALL SYSTEMS that SUPPORT these STANDARDS:
   a) _POSIX_SOURCE - If defined (with ANY value), expose definitions conforming to POSIX.1-1990 and
                      ISO C(1990). This macro is SUPERSEDED by "_POSIX_C_SOURCE".

   b) _POSIX_C_SOURCE - If defined with the value 1, this has the SAME EFFECT as "_POSIX_SOURCE".
                      - If defined with a value >= 199309, ALSO EXPOSE definitions for POSIX.1b(realtime).
                      - If defined with a value >= 199506, ALSO EXPOSE definitions for POSIX.1c(threads).
                      - If defined with the value 200112, ALSO EXPOSE definitions for the POSIX.1-2001 base
                       specification (i.e. the XSI extension is EXCLUDED). (Prior to version 2.3.3, the
                       "glibc" headers DON'T INTERPRET the value 20012 for "_POSIX_C_SOURCE").
                      - If defined with the value 200809, ALSO EXPOSE definitions for the POSIX.1-2008 base
                       specification. (Prior to version 2.10, the "glibc" headers DON'T INTERPRET the value
                       200809 for "POSIX_C_SOURCE").

   c) _XOPEN_SOURCE - If defined (with ANY value), expose POSIX.1, POSIX.2, and X/OPEN (XPG4) definitions.
                    - If defined with a value >= 500, ALSO EXPOSE SUSv2 (UNIX 98 and XPG5) extensions.
                    - If defined with a value >= 600, ADDITIONALLY EXPOSES SUSv3 XSI (UNIX 03) extensions and
                     C99 extensions. (Prior to version 2.2, the "glibc" header DON'T INTERPRET the value 600
                     for "_XOPEN_SOURCE").
                    - If defined with a value >=700, ALSO EXPOSES SUSv4 XSI extensions. (Prior to version
                     2.10, the "glibc" headers DON'T INTERPRET the value 700 for "_XOPEN_SOURCE").

          Note: The values 500, 600, and 700 for "_XOPEN_SOURCE" were chosen because SUSv2, SUSv3, and SUSv4
                are Issues 5, 6 and 7, respectively, of the X/Open specifications.

- The following feature test macros lited are GLIBC-SPECIFIC:
   a) _BSD_SOURCE  - If defined (with ANY value), expose BSD definitions. Explicitly setting JUST this macro
                    CAUSES BSD definitions to be FAVORED in a few CASES where standards CONFLICT.

   b) _SVID_SOURCE - If defined (with ANY value), expose System V Interface Defition (SVID) definitions.

   c) _GNU_SOURCE  - If defined (with ANY value), expose ALL of the definitions provided by setting ALL of the
                    PRECEDING MACROS, as well as various GNU extensions.

- When the GNU C compiler is invoked WITHOUT special options, "_POSIX_SOURCE", "_POSIX_C_SOURCE=200809"
(200112 with "glibc" versions 2.4 to 2.9, or 199506 with "glibc" version earlier than 2.4), "_BSD_SOURCE",
and "_SVID"SOURCE" are DEFINED by DEFAULT.
- If INDIVIDUAL MACROS are defined, or the compiler is INVOKED in one of its STANDARD MODES (e.g., "cc -ansi"
or "cc -std=c99"), then ONLY the REQUESTED DEFINITIONS are SUPPLIED. There is ONE EXCEPTION:
if "POSIX_C_SOURCE" is NOT otherwise DEFINED, and the compiler is NOT INVOKED in some of its STANDARD MODES,
then "POSIX_C_SOURCE" is defined with the value 200809 (200112 with "glibc" versions 2.4 to 2.9, or
199506 with "glibc" version earlier than 2.4).
- Defining MULTIPLE MACROS is ADDITIVE, so that we could, for example, use the following CC command to
EXPLICITLY SELECT the same macro settings as are provided by default:
     $ cc -D_POSIX_SOURCE -D_POSIX_C_SOURCE=199506 -D_BSD_SOURCE -D_SVID_SOURCE prog.c

- Only the "_POSIX_C_SOURCE" and "_XOPEN_SOURCE" feature test macros are specified in POSIX.1-2001/SUSv3, 
which REQUIRES that these MACROS be DEFINED with the values 200112 and 600, respectively, in CONFORMING
APPLICATIONS. Defining "_POSIX_C_SOURCE" as 200112 provides CONFORMANCE to the POSIX.1-2001 base specification
(i.e., POSIX conformance, EXCLUDING the XSI extension). Defining "_XOPEN_SOURCE" as 600 provides CONFORMANCE
to SUSv3 (i.e., XSI conformance, the base specification PLUS the XSI extension). Analogous statements apply
for POSIX.1-2008/SUSv4, which REQUIRE that the TWO MACROS be DEFINED with the values 200809 and 700.
- SUSv3 specifies that SETTING "_XOPEN_SOURCE" to 600 should SUPPLY ALL of the features that are enabled if
"_POSIX_C_SOURCE" is set to 200112. Thus, an application NEEDS TO DEFINE ONLY "_XOPEN_SOURCE" for SUSv3
(i.e., XSI) conformance. SUSv4 makes an ANALOGOUS SPECIFICATION that SETTING "_XOPEN_SOURCE" to 700 should
SUPPLY ALL of the features that are enabled if "_POSIX_C_SOURCE" is set to 200809.

- The manual pages DESCRIBE WHICH feature test macro(s) MUST be DEFINED in order to make a PARTICULAR constant
definition or function declaration VISIBLE from a header file. 
- All of the source code examples in this book are written so that they will compile using EITHER the DEFAULT
GNU C compiler options OR the following options:
     $ cc -std=c99 -D_XOPEN_SOURCE=600

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
- Various implementation data types are represented using standard C types, for example, process IDs,
user IDs, and file offsets. Although it WOULD be possible to use the C fundamental types such as 'int' and
'long' to declare variables using such information, this REDUCES PORTABILITY across UNIX systems, for the
following reasons:
   a) The SIZES of these fundamental types VARY across UNIX implementations (e.g., a 'long' may be 4 bytes on
     one system and 8 bytes on another), or sometimes even in DIFFERENT COMPILATION ENVIRONMENTS on the SAME
     IMPLEMENTATION. Furthermore, DIFFERENT implementations may use DIFFERENT types to REPRESENT the SAME
     INFORMATION. For example, a process ID might be an 'int' on one system, but a 'long' on another.

   b) Even on a single UNIX implementation, the TYPES used to REPRESENT information may DIFFER between
     releases of the implementation. Notable examples on Linux are user and group IDs. On Linux 2.2 and
     earlier, these values were represented in 16 bits. On Linux 2.4 and later, they are 32-bit values.

- To AVOID such PORTABILITY PROBLEMS, SUSv3 specifies various STANDARD SYSTEM DATA TYPES, and REQUIRES an
implementation to DEFINE and USE these types APPROPRIATELY.
- Each of these types is defined using the C 'typedef' feature. Most of the standard system data types have
names ending in "_t". Many of them are DECLARED in the header file <sys/types.h>, although a few are defined
in other header files.
- An application should EMPLOY these type definitions to PORTABLY DECLARE the variables it uses. For example,
the following declaration WOULD ALLOW an application to CORRECTLY REPRESENT process IDs on ANY
SUSv3-conformant system:
   pid_t mypid;

- Selected system data types:
    Data Type                  SUSv3 type requirement                Description
    blkcnt_t                   signed integer                        File block count
    blksize_t                  signed integer                        File block size
    cc_t                       unsigned integer                      Terminal special character
    clock_t                    integer or real-floating              System time in clock ticks
    clockid_t                  an arithmetic type                    Clock identifier for POSIX.1b clock
                                                                     and timer functions
    comp_t                     not in SUSv3                          Compressed clock ticks
    dev_t                      an arithmetic type                    Device number, consisting of major 
                                                                     and minor numbers
    DIR                        no type requirement                   Directory stream
    fd_set                     structure type                        File descriptor set for select()
    fsblkcnt_t                 unsigned integer                      File-system block count
    fsfilcnt_t                 unsigned integer                      File count
    gid_t                      integer                               Numeric group identifier
    id_t                       integer                               A GENERIC type for holding identifiers;
                                                                     large enough to hold AT LEAST pid_t,
                                                                     uid_t, and gid_t
    in_addr_t                  32-bit unsigned integer               IPv4 address
    in_port_t                  16-bit unsigned integer               IP port number
    ino_t                      unsigned integer                      File i-node number
    key_t                      an arithmetic type                    System V IPC key
    mode_t                     integer                               File permissions and type
    mqd_t                      no type requirement, but              POSIX message queue descriptor
                               shall not be an array type
    msglen_t                   unsigned integer                      Number of bytes allowed in System V
                                                                     message queue
    msgqnum_t                  unsigned integer                      Counts of messages in System V
                                                                     message queue
    nfds_t                     unsigned integer                      Number of file descriptors for poll()
    nlink_t                    integer                               Count of (hard) links to a file
    off_t                      signed integer                        File offset or size
    pid_t                      signed integer                        PID, PGID, or SID
    ptrdiff_t                  signed integer                        Difference between two pointer values,
                                                                     as a signed integer
    rlim_t                     unsigned integer                      Resource limit
    sa_family_t                unsigned integer                      Socket address family
    shmatt_t                   unsigned integer                      Count of attached processes for a
                                                                     System V shared memory segment
    sig_atomic_t               integer                               Data type that can be atomically
                                                                     accessed
    siginfo_t                  structure type                        Information about the ORIGIN of a signal
    sigset_t                   integer or structure type             Signal set
    size_t                     unsigned integer                      Size of an object in bytes
    socklen_t                  integer type >= 32 bits               Size of a socket address structure
                                                                     in bytes
    speed_t                    unsigned integer                      Terminal line speed
    ssize_t                    signed integer                        Byte count or (negative) error indication
    stack_t                    structure type                        Description of an alternate signal stack
    suseconds_t                signed integer allowing               Microsecond time interval
                               range [-1, 1000000]
    tcflag_t                   unsigned integer                      Terminal mode flag bit mask
    time_t                     integer or real_floating              Calendar time in seconds since the Epoch
    timer_t                    an arithmetic type                    Timer identifier for POSIX.1b interval
                                                                     timer functions
    uid_t                      integer                               Numeric user identifier

- For certain types in this table, SUSv3 requires that the type be IMPLEMENTED as an ARITHMETIC TYPE. This
means that the IMPLEMENTATION may CHOOSE the UNDERLYING TYPE as EITHER an INTEGER or a FLOATING-POINT
(real or complex) type.
- When discussing the data types in this Table in LATER CHAPTERS, we'll often make statements that some type
"is an integer type [specified by SUSv3]". This means that SUSv3 REQUIRES the type to be DEFINED as
an INTEGER, but DOESN'T REQUIRE that a PARTICULAR native integer type (e.g., short, int, or long) be used.
(Often, we WON'T say WHICH particular native data type is ACTUALLY used to REPRESENT each of the system data
types in Linux, because a PORTABLE APPLICATION should be written so that it DOESN'T CARE WHICH data type is
used).

- When PRINTING values of one of the numeric system data types shown in Table 3-1 (e.g., pid_t and uid_t),
we MUST be CAREFUL to NOT INCLUDE a REPRESENTATION DEPENDENCY in the "printf()" call. A representation
dependency can occur because C's argument promotion rules CONVERT values of type 'short' to 'int', but LEAVE
values of type 'int' and 'long' UNCHANGED. This means that, DEPENDING on the DEFINITION of the system data
type, EITHER an 'int' or 'long' is passed in the "printf()" call. However, because "printf()" has NO WAY to
DETERMINE the TYPES of its ARGUMENTS at RUN TIME, the CALLER must EXPLICITLY provide this information using
the "%d" or "%ld" FORMAT SPECIFIER. The PROBLEM is that SIMPLY CODING one of these specifiers WITHIN the
"printf()" call CREATES an IMPLEMENTATION DEPENDENCY. The USUAL SOLUTION is to use the "%ld" specifier and
ALWAYS CAST the corresponding value to 'long', like so:
     #   pid_t mypid; 
   
     #   mypid = getpid();        /* Returns PID of calling process */
     #   printf("My PID IS %ld\n", (long) mypid);

- We make ONE EXCEPTION to the above technique. Because the 'off_t' data type is the SIZE of a 'long long'
in some compilation environments, we CAST 'off_t' values to THIS TYPE and USE the "%lld" specifier.

     Note:  The C99 standard defined the 'z' length modifier for "printf()" to INDICATE that the following
          integer conversion CORRESPONDS to a 'size_t' or 'ssize_t' type. Thus, we COULD write "%zd" instead
          of using "%ld" plus a cast for these types. Although this SPECIFIER is AVAILABLE in "glibc", we
          AVOID IT because it is NOT AVAILABLE on ALL UNIX implementations.
            The C99 standard ALSO DEFINES the 'j' length modifier, which SPECIFIES that the CORRESPONDING
          ARGUMENT is of type 'intmax_t' (or 'uintmax_t'), an integer type that is GUARANTEED to be LARGE
          ENOUGH to be ABLE to REPRESENT an integer of ANY TYPE. Ultimately, the use of an (intmax_t) cast
          plus the "%jd" specifier SHOULD REPLACE the (long) cast plus the "%ld" specifier as the BEST WAY
          of printing numeric system data type values, since the FORMER approach ALSO HANDLES 'long long'
          values and ANY extended integer types such as 'int128_t'. However, (again) we AVOID this technique
          since it is NOT POSSIBLE on ALL UNIX implementations.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
- Each UNIX implementation specifies a RANGE of STANDARD STRUCTURES that are used in various system calls
and library functions. As an example, consider the 'sembuf' structure, which is used to represent a SEMAPHORE
OPERATION to be PERFORMED by the "semop()" system call:
        struct sembuf{
           unsigned short sem_num;        /* Semaphore number */
           short          sem_op;         /* Operation to be performed */
           short          sem_flg;        /* Operation flags */
        };

- Although SUSv3 SPECIFIES structures such as 'sembuf', it is IMPORTANT to REALIZE the following:
    a) In general, the ORDER of FIELD DEFINITIONS within such structures is NOT SPECIFIED.
    b) In SOME cases, EXTRA implementation-specific fields may be INCLUDED in such structures.

- Consequently, it is NOT PORTABLE to use a structure initializer such as the following:
      struct sembuf s = {3, -1, SEM_UNDO};

- Although this initializer WILL WORK on Linux, it WON'T WORK on ANOTHER IMPLEMENTATION where the FIELDS in
the 'sembuf' structure are DEFINED in DIFFERENT ORDER. To PORTABLY INITIALIZE such structures, we MUST use
EXPLICIT assignment statements, as in the following:
      struct sembuf s;

      s.sem_num = 3;
      s.sem_op = -1;
      s.sem_flg = SEM_UNDO;

- If we are using C99, then we can EMPLOY that language's NEW SYNTAX for structure initializers to WRITE an
EQUIVALENT INITIALIZATION:
      struct sembuf s = {.sem_num = 3, .sem_op = -1, sem_flg = SEM_UNDO};

- Considerations about the ORDER of the MEMBERS of standard structures ALSO APPLY if we want to WRITE the
CONTENTS of a STANDARD STRUCTURE to a FILE. To do this PORTABLY, we CAN'T SIMPLY do a BINARY WRITE of the
structure. Instead, the STRUCTURE FIELDS must be WRITTEN INDIVIDUALLY (probably in text form) in a
SPECIFIED ORDER.

- In some cases, a MACRO may NOT BE DEFINED on ALL UNIX implementations. For example, the "WCOREDUMP()" macro
(which checks whether a child process produced a core dump file) is WIDELY AVAILABLE, but it is NOT SPECIFIED
in SUSv3. Therefore, this macro MIGHT NOT BE PRESENT on some UNIX implementations. In order to PORTABLY HANDLE
such possibilities, we can use the C preprocessor "#ifdef" directive, as in the following example:
     #ifdef WCOREDUMP
        /* Use WCOREDUMP() macro */
     #endif

- In some cases, the header files REQUIRED to prototype various system calls and library functions VARY across
UNIX implementations (in this book, we show the requirements on Linux and note any variations from SUSv3).
- Some of the function synopses in this book show a PARTICULAR header file with the ACCOMPANYING COMMENT
"/* For portability */". This INDICATES that the header file is NOT REQUIRED on Linux or by SUSv3, but because
SOME OTHER (especially OLDER) IMPLEMENTATIONS may REQUIRE it, we SHOULD INCLUDE it in PORTABLE programs.

     Note: For many of the functions that it specified, POSIX.1-1990 required that the header <sys/types.h>
          be included BEFORE ANY OTHER headers associated with the function. However, this requirement was
          reduntant, because most contemporary UNIX implementations DID NOT REQUIRE applications to include
          this header for these functions. Consequently, SUSv1 REMOVED this requirement. Nevertheless, when
          writing PORTABLE PROGRAMS, it is WISE to make this one of the FIRST HEADER FILES INCLUDED.

