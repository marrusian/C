##########################################################################################################
- All system calls for performing I/O refer to OPEN FILES using a "FILE DESCRIPTOR", a (usually small)
nonnegative integer. File descriptors are used to refer to ALL TYPES of OPEN FILES, including pipes, FIFOs,
sockets, terminals, devices, and regular files. Each process has ITS OWN SET of FILE DESCRIPTORS.

- Standard file descriptors (Table 4-1):
    File descriptor   Purpose          POSIX name     STDIO stream
           0          standard input   STDIN_FILENO   stdin
           1          standard output  STDOUT_FILENO  stdout
           2          standard error   STDERR_FILENO  stderr

- By CONVENTION, most programs EXPECT to be ABLE to USE the above THREE STANDARD FILE DESCRIPTORS. These
three descriptors are OPENED on the PROGRAM'S BEHALF by the shell, BEFORE the program is started. Or, more
precisely, the program INHERITS COPIES of the SHELL'S FILE DESCRIPTORS, and the shell NORMALLY OPERATES with
these three file descriptors ALWAYS OPEN (In an interactive shell, these three file descriptors normally
refer to the terminal under which the shell is running). If I/O redirections are specified on a command line,
then the shell ENSURES that the file descriptors are SUITABLY MODIFIED before starting the program. 

- When referring to these file descriptors in a program, we can use EITHER the numbers (0, 1, or 2) or,
PREFERABLY, the POSIX standard names defined in <unistd.h>.

    Note: Although the variables "stdin", "stdout", and "stderr" INITIALLY REFER to the process's standard
         input, output, and error, they can be CHANGED to REFER to ANY FILE by using the "freopen()" library
         function. As part of its operation, "freopen()" may CHANGE the FILE DESCRIPTOR underlying the
         REOPENED stream. In other words, after a "freopen()" on "stdout", for example, it is NO LONGER SAFE
         to ASSUME that the underlying FILE DESCRIPTOR is STILL 1.

- The following are the four KEY system calls for performing file I/O (programming languages and software
packages typically EMPLOY these calls ONLY INDIRECTLY, via I/O libraries):
   a) fd = open(pathname, flags, mode) opens the file identified by "pathname", RETURNING a FILE DESCRIPTOR
     used to REFER to the OPEN FILE in SUBSEQUENT calls. If the file DOESN'T EXIST, "open()" may CREATE it,
     DEPENDING on the SETTINGS of the "flags" bit-mask argument. The "flags" argument ALSO SPECIFIES whether
     the file is to be opened for READING, WRITING, or BOTH. The "mode" argument specifies the PERMISSIONS 
     to be PLACED on the FILE if it is created by this call. If the "open()" call is NOT BEING USED to CREATE
     a file, this argument is IGNORED and can be OMITTED.

   b) numread = read(fd, buffer, count) reads AT MOST "count" bytes from the OPEN FILE referred to by "fd"
     and STORES them in "buffer". The "read()" call RETURNS the number of bytes ACTUALLY read. If NO FURTHER
     BYTES could be read (i.e., EOF was encountered), "read()" returns 0.

   c) numwritten = write(fd, buffer, count) writes UP TO "count" bytes FROM "buffer" TO the OPEN FILE referred
     to by "fd". The "write()" call RETURNS the number of bytes ACTUALLY written, which MAY BE LESS than
     "count".
 
   d) status = close(fd) is called AFTER ALL I/O has been COMPLETED, in order to RELEASE the FILE DESCRIPTOR
     "fd" and its ASSOCIATED KERNEL RESOURCES.

##########################################################################################################