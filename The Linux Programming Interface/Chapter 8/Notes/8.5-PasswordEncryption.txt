#############################################################################################################
- Some applications REQUIRE that users AUTHENTICATE themselves. Authentication typically takes the form of
a USERNAME (LOGIN NAME) and a PASSWORD. An application MAY MAINTAIN its OWN DATABASE of USERNAMES and
PASSWORDS for this purpose. Sometimes, however, it is NECESSARY or CONVENIENT to ALLOW USERS to ENTER their
STANDARD USERNAME and PASSWORD as DEFINED in "/etc/passwd" and "/etc/shadow" (we ASSUME a SYSTEM where
PASSWORD SHADOWING is ENABLED). Network applications that provide SOME FORM of LOGIN to a REMOTE SYSTEM, such
as "ssh" and "ftp", are TYPICAL EXAMPLES of such programs. These applications MUST VALIDATE a USERNAME and
a PASSWORD in the SAME WAY that the STANDARD "LOGIN" PROGRAM does.

- For SECURITY REASONS, UNIX systems ENCRYPT PASSWORDS using a ONE-WAY ENCRYPTION ALGORITHM, which means that
there is NO METHOD of RE-CREATING the ORIGINAL PASSWORD from its ENCRYPTED FORM. Therefore, the ONLY WAY of
VALIDATING a CANDIDATE PASSWORD is to ENCRYPT IT using the SAME METHOD and CHECK if the ENCRYPTED RESULT
MATCHES the VALUE STORED in "/etc/shadow". The ENCRYPTION ALGORITHM is ENCAPSULATED in the "crypt()" function:
         DEP: #define _XOPEN_SOURCE
              #include <unistd.h>    PROTO: char *crypt(const char *key, const char *salt);
                                     RET: Returns pointer to STATICALLY ALLOCATED STRING containing
                                          ENCRYPTED PASSWORD on SUCCESS, or NULL on ERROR.

- The "crypt()" algorithm takes a "key" (i.e., a PASSWORD) of UP TO 8 CHARACTERS, and APPLIES a VARIATION of
the Data Encryption Standard (DES) algorithm to it. The "salt" argument is a 2-character string whose value is
used to PERTURB (VARY) the ALGORITHM, a TECHNIQUE DESIGNED to make it MORE DIFFICULT to CRACK the ENCRYPTED
PASSWORD. The function returns a POINTER to a STATICALLY ALLOCATED 13-character string that is the ENCRYPTED
PASSWORD.

              Note:  As noted earlier, OTHER ALGORITHMS may be used INSTEAD of DES. For example, MD5 yields a
                   34-character string STARTING with a DOLLAR SIGN ($), which ALLOWS "crypt()" to DISTINGUISH
                   DES-encrypted passwords from MD5-encrypted passwords. 
                     In our discussion of PASSWORD ENCRYPTION, we are using the word "encryption" somewhat
                   LOOSELY. Accurately, DES uses the GIVEN PASSWORD STRING as an ENCRYPTION KEY to ENCODE a
                   FIXED BIT STRING, while MD5 is a COMPLEX TYPE of HASHING FUNCTION. The result in BOTH CASES
                   is the SAME: an UNDECIPHERABLE and IRREVERSIBLE TRANSFORMATION of the INPUT PASSWORD.

- BOTH the "salt" argument and the ENCRYPTED PASSWORD are COMPOSED of CHARACTERS SELECTED from the
64-character set [a-zA-z0-9/.]. Thus, the 2-character "salt" argument can CAUSE the ENCRYPTION ALGORITHM to
VARY in ANY of 64*64 = 4096 DIFFERENT WAYS. This means that INSTEAD of PREENCRYPTING an ENTIRE DICTIONARY and
CHECKING the ENCRYPTED PASSWORD against ALL WORDS in the DICTIONARY, a CRACKER would NEED to CHECK the
PASSWORD against 4096 ENCRYPTED VERSIONS of the DICTIONARY.

- The ENCRYPTED PASSWORD returned by "crypt()" CONTAINS a COPY of the ORIGINAL "salt" value as its FIRST TWO
CHARACTERS. This means that when ENCRYPTING a CANDIDATE PASSWORD, we can OBTAIN the APPROPRIATE "salt" value
from the ENCRYPTED PASSWORD value ALREADY STORED in "/etc/shadow" (programs such as "passwd(1)" GENERATE a 
RANDOM "salt" value when ENCRYPTING a NEW PASSWORD). In fact, the "crypt()" function IGNORES ANY CHARACTERS
in the "salt" string BEYOND the FIRST TWO. Therefore, we can SPECIFIY the ENCRYPTED PASSWORD ITSELF as the
"salt" argument.

- In order to use "crypt()" on Linux, we MUST COMPILE programs with the "-lcrypt" option, so that they are
LINKED against the CRYPT LIBRARY.

- We can READ users' passwords using the "getpass()" function:
         DEP: #define _BSD_SOURCE
              #include <unistd.h>    PROTO: char *getpass(const char *prompt);
                                     RET: Returns pointer to STATICALLY ALLOCATED input password
                                          string on success, or NULL on error.

- The "getpass()" function first DISABLES ECHOING and ALL PROCESSING of TERMINAL SPECIAL CHARACTERS (such as
the "INTERRUPT" character, normally CTRL-C) (it will be explained how to CHANGE these TERMINAL SETTINGS in
Chapter 62). It then PRINTS the STRING pointed to by "prompt", and READS a LINE OF INPUT, returning the
null-terminated INPUT STRING with the trailing newline STRIPPED, as its function result (this string is
STATICALLY ALLOCATED, and so will be OVERWRITTEN in a SUBSEQUENT CALL to "getpass()"). Before returning,
"getpass()" RESTORES the TERMINAL SETTINGS to their ORIGINAL STATES.

              Note:  The program in Listing 8-2 SIZES the CHARACTER ARRAY holding a USERNAME using the value
                   returned by "sysconf(_SC_LOGIN_NAME_MAX)", which YIELDS the MAXIMUM SIZE of a USERNAME on
                   the HOST SYSTEM.

- Listing 8-2 illustrates an IMPORTANT SECURITY POINT. Programs that READ a PASSWORD should IMMEDIATELY
ENCRYPT that PASSWORD and ERASE the UNENCRYPTED VERSION from MEMORY. This MINIMIZES the POSSIBILITY of a
PROGRAM CRASH producing a CORE DUMP FILE that could be READ to DISCOVER the PASSWORD. 

              Note:  There are OTHER POSSIBLE WAYS in which the UNENCRYPTED PASSWORD could be EXPOSED. For 
                   example, the PASSWORD could be READ from the SWAP FILE by a PRIVILEGED PROGRAM if the
                   VIRTUAL MEMORY PAGE containing the PASSWORD is SWAPPED OUT. Alternatively, a process with
                   SUFICIENT PRIVILEGE could READ "/dev/mem" (a VIRTUAL DEVICE that PRESENTS the PHYSICAL
                   MEMORY of a computer as a SEQUENTIAL STREAM OF BYTES) in an ATTEMPT to DISCOVER the PASSWD.
                     The "getpass()" function APPEARED in SUSv2, which MARKED it "LEGACY", noting that the
                   NAME was MISLEADING and the function provided FUNCTIONALITY that was in any case EASY to 
                   IMPLEMENT. The SPECIFICATION of "getpass()" was REMOVED in SUSv3. It nevertheless appears
                   on MOST UNIX implementations.

#############################################################################################################