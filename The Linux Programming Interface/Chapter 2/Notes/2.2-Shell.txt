##########################################################################################################
- A SHELL is a special-purpose program designed to read commands typed by a user and execute appropriate
programs in response to those commands. Such a program is sometimes known as a COMMAND INTERPRETER.

- The term LOGIN SHELL is used to denote the process that is created to RUN A SHELL when the user first
LOGS IN (or, simply put, it's a shell that asks the user to log in before it gives a prompt).

- Whereas on some OSs the command interpreter is an INTEGRAL PART of the KERNEL, on UNIX systems, the shell
is a USER PROCESS. Many different shells exists, and different users on the same computer can
simultaneously use different shells. A number of important shells have appeared over time:
   a) Bourne shell (sh): This is the oldest of the widely used shells, and was written by Steve Bourne.
   b) C shell (csh): This shell was written by Bill Joy at the UCB. It provided several useful interactive
                     features unavailable in the Bourne shell (command history, command-line editing, job
                     control and aliases). The C shell was NOT backward compatible with the Bourne shell.
   c) Korn shell (ksh): This shell was written as the SUCCESSOR to the Bourne shell by David Korn at AT&T.
                        It incorporated interactive features similar to those provided by the C shell,
                        while maintaining backwards compatibility.
   d) Bourne again shell (bash): This shell is the GNU project's reimplementation of the Bourne shell.
                                 It supplies interactive features similar to those available in the C and
                                 Korn shells. It is probaby the MOST WIDELY used shell on LINUX.

- The shells are designed not merely for interactive use, but also for the interpretation of SHELL SCRIPTS,
which are TEXT FILES containing SHELL COMMANDS. For this purpose, EACH of the shells has the FACILITIES
typically associated with programming languages: variables, loop and conditional statements, I/O commands,
and functions.

##########################################################################################################