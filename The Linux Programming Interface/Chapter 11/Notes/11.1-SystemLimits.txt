- Each UNIX implementation SETS LIMITS on VARIOUS SYSTEM FEATURES and RESOURCES, and PROVIDES - or chooses
NOT to provide - OPTIONS defined in various standards. Examples include the following:
     - How many files can a process hold open simultaneously?
     - Does the system support realtime signals?
     - What is the largest value that can be stored in a variable of type 'int'?
     - How big an argument list can a program have?
     - What is the maximum length of a pathname? 

- While we could HARD-CODE ASSUMED LIMITS and OPTIONS into an application, this REDUCES PORTABILITY, since
limits and options MAY VARY:
     a) Across UNIX implementations - although limits and options MAY BE FIXED on an INDIVIDUAL IMPLEMENTATION
                                      they can VARY from ONE UNIX implementation TO ANOTHER. The MAXIMUM VALUE
                                      that can be STORED in an 'int' is an EXAMPLE of such a LIMIT.

     b) At RUN TIME on a PARTICULAR IMPLEMENTATION - the kernel may have been RECONFIGURED to CHANGE A LIMIT,
                                                     for example. Alternatively, the application may have been
                                                     COMPILED on ONE SYSTEM, but RUN on ANOTHER SYSTEM with 
                                                     DIFFERENT LIMITS and OPTIONS.

     c) From one FILE SYSTEM to another - for example, traditional System V file systems ALLOWS a FILENAME to
                                          be UP TO 14 bytes, while traditional BSD file systems and MOST 
                                          NATIVE Linux file systems ALLOW FILENAMES of UP TO 255 bytes.

- Since SYSTEM LIMITS and OPTIONS AFFECT what an application may do, a PORTABLE application NEEDS WAYS of
DETERMINING limit values and whether options are supported. The C programming language standards and SUSv3
provide TWO PRINCIPAL AVENUES for an application to OBTAIN such information:
     a) Some limits and options can be DETERMINED at COMPILE TIME. For example, the MAXIMUM VALUE of an 'int'
        is DETERMINED by the HARDWARE ARCHITECTURE and COMPILER DESIGN CHOICES. Such LIMITS can be RECORDED
        in HEADER FILES.

     b) Other limits and options MAY VARY at RUN TIME. For such cases, SUSv3 defines three functions -
        "sysconf()", "pathconf()", and "fpathconf()" - that an application can call to CHECK these
        IMPLEMENTATION LIMITS and OPTIONS.

- SUSv3 SPECIFIES a RANGE OF LIMITS that a CONFORMING IMPLEMENTATION may ENFORCE, as well as a SET OF OPTIONS,
each of which MAY or MAY NOT BE PROVIDED by a PARTICULAR SYSTEM.

#############################################################################################################
- For EACH LIMIT that it specifies, SUSv3 REQUIRES that ALL IMPLEMENTATIONS SUPPORT a "MINIMUM VALUE" for the
limit. In MOST CASES, this MINIMUM VALUE is DEFINED as a CONSTANT in <limits.h> with a name PREFIXED by the
string "_POSIX_", and (USUALLY) containing the string "_MAX"; thus, the FORM of the name is "_POSIX_XXX_MAX".

- If an application RESTRICTS ITSELF to the MINIMUM VALUES that SUSv3 REQUIRES for each limit, then it will be
PORTABLE to ALL IMPLEMENTATIONS of the STANDARD. However, doing so PREVENTS an APPLICATION from TAKING
ADVANTAGE of IMPLEMENTATIONS that PROVIDE HIGHER LIMITS. For this reason, it is USUALLY PREFERABLE to
DETERMINE the LIMIT on a particular system USING <limits.h>, "sysconf"(), or "pathconf()".

                 Note:  The use of the string "_MAX" in the limit names defined by SUSv3 can appear CONFUSING,
                      given their description as MINIMUM values. The RATIONALE for the names BECOMES CLEAR
                      when we CONSIDER that each of these constants DEFINES an UPPER LIMIT on some resource or
                      feature, and the STANDARDS are SAYING that this upper limit MUST HAVE a CERTAIN MINIMUM
                      VALUE.
                        In some cases, "MAXIMUM VALUES" are provided for a limit, and these values have names
                      containing the string "_MIN". For these constants, the CONVERSE holds true: they
                      represent a LOWER LIMIT on some resource, and the STANDARDS are saying that, on a
                      CONFORMING IMPLEMENTATION, this LOWER LIMIT can be NO GREATER than a CERTAIN VALUE.
                      For example, the "FLT_MIN" limit (1E-37) defines the LARGEST VALUE that an 
                      implementation MAY SET for the SMALLEST FLOATING-POINT NUMBER that may be represented,
                      and all conforming implementations will be able to represent floating-point numbers
                      AT LEAST this small.

- Each limit has a "NAME", which CORRESPONDS to the "MINIMUM VALUE NAME" described above, but LACKS the
"_POSIX_" PREFIX. An implementation MAY define a constant with this name in <limits.h> to INDICATE the
CORRESPONDING LIMIT for this implementation. If defined, this limit WILL ALWAYS be AT LEAST the SIZE of the
MINIMUM VALUE described above (i.e., XXX_MAX >= _POSIX_XXX_MAX).

- SUSv3 DIVIDES the LIMITS that it specifies into THREE CATEGORIES:
      I) Runtime invariant values;
     II) Pathname variable values;
    III) Runtime increasable values.

I) A RUNTIME INVARIANT is a LIMIT whose VALUE, if defined in <limits.h>, is FIXED for the implementation.
However, the value MAY be INDETERMINATE (perhaps because it depends on available memory space), and hence
OMITTED from <limits.h>. In this case (and EVEN IF the limit is ALSO DEFINED in <limits.h>), an application
CAN USE "sysconf()" to DETERMINE the VALUE at RUNTIME.

- The "MQ_PRIO_MAX" limit is an EXAMPLE of a runtime invariant value. As will be noted in Section 52.5.1,
there is a limit on the priority for messages in POSIX message queues. SUSv3 defines the constant
"_POSIX_MQ_PRIO_MAX" with the value 32, as the minimum value that all conforming implementations must provide
for this limit. This means that we can be SURE that ALL CONFORMING IMPLEMENTATIONS will ALLOW priorities from
0 UP TO AT LEAST 31 for message priorities. A UNIX implementation can SET a HIGHER LIMIT than this, DEFINING
the CONSTANT "MQ_PRIO_MAX" in <limits.h> with the value of its limit. For example, on Linux, "MQ_PRIO_MAX" is
defined with the value 32,768. This value can ALSO BE DETERMINED at RUN TIME using the following call:
          # lim = syscnof(_SC_MQ_PRIO_MAX);

II) PATHNAME VARIABLE VALUES are LIMITS that RELATE to PATHNAMES (FILES, DIRECTORIES, TERMINALS, etc). Each
limit MAY BE CONSTANT for the implementation OR MAY VARY from ONE FILE SYSTEM to ANOTHER. In cases where a
LIMIT can VARY DEPENDING on the PATHNAME, an application can DETERMINE its value using "pathconf()" or
"fpathconf()".

- The "NAME_MAX" limit is an EXAMPLE of a pathname variable value. This limit defines the MAXIMUM SIZE for a
FILENAME on a PARTICULAR FILE SYSTEM. SUSv3 defines the constant "_POSIX_NAME_MAX", with the value 14 (the old
System V file-system limit), as the MINIMUM VALUE that an implementation MUST ALLOW. An implementation MAY
DEFINE "NAME_MAX" with a limit HIGHER than this and/or make information about a specific file system available
via a call of the following form:
          # lim = pathconf(directory_path, _PC_NAME_MAX)
 (The 'directory_path' is a PATHNAME for a DIRECTORY on the file system of interest).

III) A RUNTIME INCREASABLE VALUE is a LIMIT that has a FIXED MINIMUM VALUE for a PARTICULAR IMPLEMENTATION,
and ALL SYSTEMS running the implementation will provide AT LEAST this MINIMUM VALUE. However, a SPECIFIC
SYSTEM MAY INCREASE this LIMIT at RUN TIME, and an application can FIND the ACTUAL VALUE SUPPORTED on the
system using "sysconf()".

- An example of a runtime increasable value is "NGROUPS_MAX", which defines the MAXIMUM NUMBER of SIMULTANEOUS
SUPPLEMENTARY GIDs for a process. SUSv3 defines the CORRESPONDING MINIMUM VALUE, "_POSIX_NGROUPS_MAX", with
the value 8. At RUN TIME, an application can RETRIEVE the LIMIT using the call "sysconf(_SC_NGROUPS_MAX)".

-------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------
 | Name of limit  | Min.  | sysconf()/pathconf()  | Description                          |
 | (<limits.h>)   | value | name (<unistd.h>)     |                                      |
 -----------------------------------------------------------------------------------------
 | ARG_MAX        | 4096  | _SC_ARG_MAX           | Maximum bytes for arguments (argv)   |
 |                |       |                       | PLUS environment (environ) that can  |
 |                |       |                       | be supplied to an "exec()"           |
 | none           | none  | _SC_CLK_TCK           | Unit of measurement for "times()"    |
 | LOGIN_NAME_MAX | 9     | _SC_LOGIN_NAME_MAX    | Maximum size of a login name         |
 |                |       |                       | (including terminating null byte)    |
 | OPEN_MAX       | 20    | _SC_OPEN_MAX          | Maximum number of file descriptors   |
 |                |       |                       | that a process can hve open at one,  |
 |                |       |                       | and one greater than maximum usable  |
 | NGROUPS_MAX    | 8     | _SC_NGROUPS_MAX       | Maximum number of supplementary      |
 |                |       |                       | groups of which a process can be a   |
 |                |       |                       | member                               |
 | none           | 1     | _SC_PAGESIZE          | Size of a virtual memory page        |
 |                |       |                       | (_SC_PAGE_SIZE is a synonym)         |
 | RTSIG_MAX      | 8     | _SC_RTSIG_MAX         | Maximum number of distinct realtime  |
 |                |       |                       | signals                              |
 | SIGQUEUE_MAX   | 32    | _SC_SIGQUEUE_MAX      | Maximum number of queued realtime    |
 |                |       |                       | signals                              |
 | STREAM_MAX     | 8     | _SC_STREAM_MAX        | Maximum number of stdio streams that |
 |                |       |                       | can be open at one time              |
 | NAME_MAX       | 14    | _PC_NAME_MAX          | Maximum number of bytes in a filename|
 |                |       |                       | EXCLUDING terminating null byte      | 
 | PATH_MAX       | 256   | _PC_PATH_MAX          | Maximum number of bytes in a pathname|
 |                |       |                       | INCLUDING terminating null byte      |
 | PIPE_BUF       | 512   | _PC_PIPE_BUF          | Maximum number of bytes that can be  |
 |                |       |                       | written ATOMICALLY to a pipe or FIFO |
 -----------------------------------------------------------------------------------------

- The FIRST COLUMN gives the NAME of the LIMIT, which MAY be defined as a CONSTANT in <limits.h> to INDICATE
the LIMIT for a PARTICULAR IMPLEMENTATION. The SECOND COLUMN is the SUSv3-defined MINIMUM for the limit (also
defined in <limits.h>). In MOST CASES, each of the MINIMUM VALUES is DEFINED as a CONSTANT PREFIXED with the
string "_POSIX_". For example, the constant "_POSIX_RTSIG_MAX" (defined with the value 8) specifies the
SUSv3-REQUIRED MINIMUM corresponding to the "RTSIG_MAX" implementation constant. The THIRD COLUMN specifies
the CONSTANT NAME that can be given at RUN TIME to "sysconf()" or "pathconf()" in order to RETRIEVE the
implementation limit. The constants BEGINNING WITH "_SC_" are for use with "sysconf()" those BEGINNING WITH
"_PC_" are for use with "patconf()" and "fpathconf()".

- Note the following information supplementary to that shown in the above table:
      - The "getdtablesize()" function is an OBSOLETE ALTERNATIVE for determining the process file descriptor
        limit (OPEN_MAX). This function was SPECIFIED in SUSv2 (marked LEGACY), but was REMOVED in SUSv3.
      
      - The "getpagesize()" function is an OBSOLETE ALTERNATIVE for determining the system page size 
        (_SC_PAGESIZE). This function was SPECIFIED in SUSv2 (marked LEGACY), but was REMOVED in SUSv3.

      - The constant "FOPEN_MAX", defined in <stdio.h>, is SYNONYMOUS with "STREAM_MAX".

      - "NAME_MAX" EXCLUDES the TERMINATING NULL BYTE, while "PATH_MAX" INCLUDES it. This inconsistency
        REPAIRS an EARLIER INCONSISTENCY in the POSIX.1 standard that LEFT IT UNCLEAR WHETHER "PATH_MAX"
        included the terminating null byte. Defining "PATH_MAX" to include the terminator means that
        applications that allocated JUST "PATH_MAX" bytes for a pathname will STILL CONFORM to the STANDARD.

- From the shell, we can use the "getconf" command to OBTAIN the LIMITS and OPTIONS implemented by a
PARTICULAR UNIX IMPLEMENTATION. The GENERAL FORM of this command is as follows:
       $ getconf variable-name [ pathname ]

- The "variable-name" IDENTIFIES the LIMIT OF INTEREST and is one of the SUSv3 standard limit names, such as
'ARG_MAX' or 'NAME_MAX'. Where the limit RELATES to the pathname, we MUST SPECIFY a PATHNAME as the SECOND
ARGUMENT to the command.

#############################################################################################################